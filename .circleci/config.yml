version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-cli: circleci/aws-cli@2.0.2
  aws-s3: circleci/aws-s3@3.0.0

commands:
  setup-environment-vars:
    description: "Set up any required environment variables."
    steps:
      - run:
          name: Setup Environment Variables
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              WORKSPACE_NAME=default
            else
              WORKSPACE_NAME=prod
            fi
            echo "export TERRAFORM_WORKSPACE=$WORKSPACE_NAME" >> $BASH_ENV
            echo "export GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}" >> ${BASH_ENV}

  ecr-tag-and-push:
    description: "Tag and Push Docker Image because CircleCI is incapable of sanity"
    parameters:
      account-url:
        default: AWS_ECR_ACCOUNT_URL
        description: |
          Env var storing Amazon ECR account URL that maps to an AWS account, e.g. {awsAccountNum}.dkr.ecr.us-west-2.amazonaws.com defaults to AWS_ECR_ACCOUNT_URL
        type: env_var_name
      repo:
        description: Name of an Amazon ECR repository
        type: string
      docker_tag:
        default: DOCKER_TAG
        description: Env var storing docker image tag (default = DOCKER_TAG)
        type: env_var_name
    steps:
      - attach_workspace:
          at: /tmp/cci-extras/workspace
      - run: cat /tmp/cci-extras/workspace/docker_tag_vars >> $BASH_ENV
      - run:
          name: "Show Docker tag"
          command: |
            echo "DOCKER TAG: $DOCKER_TAG"
      - run:
          name: "Docker Tag and Push"
          command: |
            docker tag $<<parameters.account-url>>/<<parameters.repo>>:circleci-build \
              $<<parameters.account-url>>/<<parameters.repo>>:$<<parameters.docker_tag>>
            docker push $<<parameters.account-url>>/<<parameters.repo>>:$<<parameters.docker_tag>>

  prepare-terraform:
    description: "Installs Terraform and dependencies"
    steps:
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: check s3
          command: aws sts get-caller-identity
      - run:
          name: keep SSH happy
          command: |
            mkdir -m 0700 ~/.ssh
            ssh-keyscan -p 22 github.com >> ~/.ssh/known_hosts
            cat ~/.ssh/known_hosts
      - run:
          name: Install terraform
          command: wget https://releases.hashicorp.com/terraform/0.12.29/terraform_0.12.29_linux_amd64.zip && unzip terraform_0.12.29_linux_amd64.zip && chmod +x terraform && sudo mv terraform /usr/bin/
      - run:
          name: Install terragrunt
          command: wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.23.27/terragrunt_linux_amd64 && chmod +x terragrunt_linux_amd64 && sudo mv terragrunt_linux_amd64 /usr/bin/terragrunt

  validate_master_branch:
    description: "Verifies that tag commit is present on master branch"
    steps:
      - run:
          name: "Verify Master branch"
          command: |
            set -ex
            echo $CIRCLE_TAG
            git branch -r --contains $CIRCLE_SHA1 --format='%(refname:short)'
            # IS_ON_MASTER="$(git branch -r --contains $CIRCLE_SHA1 --format='%(refname:short)' | grep ^origin/master$ || true)"
            IS_ON_MASTER="true" #temporary plug
            echo "IS_ON_MASTER: \"$IS_ON_MASTER\""
            if [[ -n "$IS_ON_MASTER" ]]
            then
              echo "ON MASTER BRANCH: \"$IS_ON_MASTER\""
            else
              echo "NOT ON MASTER BRANCH, FAILING BUILD"
              exit 100
            fi

jobs:
  build_tomcat_push_jar:
    working_directory: ~/ausseabed-processing-pipeline
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-tomcat-push-{{ checksum "./geoserver/ausseabed.pipeline/pom.xml" }}
      - run:
          working_directory: ./geoserver/ausseabed.pipeline/
          command: mvn dependency:go-offline # gets the project dependencies
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-tomcat-push-{{ checksum "./geoserver/ausseabed.pipeline/pom.xml" }}
      - run:
          working_directory: ./geoserver/ausseabed.pipeline/
          command: mvn package
      - store_artifacts:
          path: ./geoserver/ausseabed.pipeline/target/ausseabed.pipeline-1.0-SNAPSHOT.jar
      - persist_to_workspace:
          root: ./geoserver/ausseabed.pipeline/target
          paths:
            - ausseabed.pipeline-1.0-SNAPSHOT.jar
            - lib/jackson*.jar
            - lib/jul*.jar
            - lib/commons-logging*.jar

  build_and_push_kartoza:
    machine:
      image: ubuntu-2004:2022.04.2
    steps:
      - run:
          name: Download kartoza/geoserver
          command: |
            git clone https://github.com/kartoza/docker-geoserver.git
            cd docker-geoserver
            git checkout 78319e9
            cd ..
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          checkout: false
          create-repo: false
          dockerfile: Dockerfile
          path: ./docker-geoserver/
          extra-build-args: "--build-arg GS_VERSION=2.22.2 --build-arg IMAGE_VERSION=9-jdk11-openjdk-slim-buster --build-arg JAVA_HOME=/usr/local/openjdk-11/bin/java"
          region: AWS_REGION_ENV_VAR_NAME
          repo: "ausseabed-kartoza-geoserver"
          tag: "9-jdk11-openjdk-slim-buster-2.22.2"

  dev_docker_tag:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - run: mkdir -p workspace
      - run:
          name: "Prepare DEV docker tag"
          command: |
            echo "export DOCKER_TAG=latest" >> workspace/docker_tag_vars
      - persist_to_workspace:
          root: workspace
          paths:
            - docker_tag_vars

  prepare_docker_tag:
    machine:
      image: ubuntu-2004:2022.04.2
    steps:
      - checkout
      - run: mkdir -p workspace
      - validate_master_branch
      - run:
          name: "Extract Docker tag from Git tag"
          command: |
            DOCKER_TAG=`echo $CIRCLE_TAG | awk -F'/' '{print $3}'`
            if [[ ! $DOCKER_TAG =~ ^[0-9][0-9\.]*$ ]]
            then
              echo "Incorrect format for Docker Tag: \"$DOCKER_TAG\", are we on \"prod/publish/X.Y.Z\" tag?"
              exit 101
            fi
            echo "Extracted new Docker Tag: \"$DOCKER_TAG\""
            echo "export DOCKER_TAG=$DOCKER_TAG" >> workspace/docker_tag_vars
      - persist_to_workspace:
          root: workspace
          paths:
            - docker_tag_vars

  build_geoserver_image:
    machine:
      image: ubuntu-2004:2022.04.2
    steps:
      - checkout
      - setup-environment-vars
      - attach_workspace:
          at: ./geoserver/ausseabed.pipeline/target/
      - run:
          name: Check Scripts
          command: find .
      - run:
          name: Update ECR Reference
          command: |
            sed -i s/FROM\ 288871573946.dkr.ecr.ap-southeast-2.amazonaws.com/FROM\ ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME}/g ./geoserver/Dockerfile
      - aws-cli/setup:
          override-installed: true
          aws-region: AWS_REGION_ENV_VAR_NAME
      - aws-s3/copy:
          from: s3://ausseabed-staging-$TERRAFORM_WORKSPACE/gt-jdbc-oracle-28.2.jar
          to: ./geoserver/
          aws-region: AWS_REGION_ENV_VAR_NAME
      - aws-s3/copy:
          from: s3://ausseabed-staging-$TERRAFORM_WORKSPACE/ojdbc8-19.10.0.0.jar
          to: ./geoserver/
          aws-region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/ecr-login:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          region: AWS_REGION_ENV_VAR_NAME
      - aws-ecr/build-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          dockerfile: ./Dockerfile
          path: ./geoserver/
          repo: ausseabed-geoserver
          tag: circleci-build,latest
      - ecr-tag-and-push:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          repo: ausseabed-geoserver
          docker_tag: DOCKER_TAG

  validate_prod_deployment:
    machine:
      image: ubuntu-2004:2022.04.2
    steps:
      - checkout
      - validate_master_branch

  prepare_deploy_geoserver:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - run: mkdir -p workspace
      - prepare-terraform
      - run:
          name: Checkout Foundation repository
          command: git clone git@github.com:ausseabed/ausseabed-aws-foundation.git
      - run:
          name: terragrunt init
          working_directory: ./ausseabed-aws-foundation/geoserver-app-deployment
          command: pwd && echo $CIRCLE_WORKING_DIRECTORY && terragrunt init -input=false
      - run:
          name: terraform plan
          working_directory: ./ausseabed-aws-foundation/geoserver-app-deployment
          command: terragrunt plan -out=terraform.plan -input=false
      - run: mv ./ausseabed-aws-foundation/geoserver-app-deployment/terraform.plan workspace
      - persist_to_workspace:
          root: workspace
          paths:
            - terraform.plan

  do_deploy_geoserver:
    docker:
      - image: circleci/python:3.7-stretch
    steps:
      - attach_workspace:
          at: /tmp/cci-extras/workspace
      - prepare-terraform
      - run:
          name: Checkout Foundation repository
          command: git clone git@github.com:ausseabed/ausseabed-aws-foundation.git
      - run:
          name: terragrunt init
          working_directory: ./ausseabed-aws-foundation/geoserver-app-deployment
          command: pwd && echo $CIRCLE_WORKING_DIRECTORY && terragrunt init -input=false
      - run:
          name: terragrunt apply
          working_directory: ./ausseabed-aws-foundation/geoserver-app-deployment
          command: |
            terragrunt apply -input=false --auto-approve /tmp/cci-extras/workspace/terraform.plan
      - run:
          name: Print Commands for Next Production Tag
          working_directory: ./ausseabed-aws-foundation/geoserver-app-deployment
          command: ./update_message.sh

### Pre-defined filters for workflows

prod_publish_tag_only: &prod_publish_tag_only
  filters:
    tags:
      only: /^prod/publish/\d[\d\.]*f?$/
    branches:
      ignore: /.*/

prod_deploy_tag_only: &prod_deploy_tag_only
  filters:
    tags:
      only: /^prod/deploy/\d[\d\.]*f?$/
    branches:
      ignore: /.*/

master_branch_only: &master_branch_only
  filters:
    branches:
      only:
        - master
        - /.*circleci-prod.*/

### Workflows section
workflows:
  build_and_push_kartoza:
    jobs:
      - build_and_push_kartoza:
          filters:
            branches:
              only:
                - /.*build_and_push_kartoza.*/

  build_and_deploy_dev_images:
    jobs:
      - dev_docker_tag:
          <<: *master_branch_only
      - build_tomcat_push_jar:
          <<: *master_branch_only
      - build_geoserver_image:
          <<: *master_branch_only
          requires:
            - dev_docker_tag
            - build_tomcat_push_jar
      - prepare_deploy_geoserver:
          <<: *master_branch_only
          requires:
            - build_geoserver_image
      - do_deploy_geoserver:
          <<: *master_branch_only
          requires:
            - prepare_deploy_geoserver

  publish_production_images:
    jobs:
      - prepare_docker_tag:
          <<: *prod_publish_tag_only
      - build_tomcat_push_jar:
          <<: *prod_publish_tag_only
      - build_geoserver_image:
          <<: *prod_publish_tag_only
          context: ga_sb_docker_prod_publish
          requires:
            - prepare_docker_tag
            - build_tomcat_push_jar

  deploy_to_production:
    jobs:
      - validate_prod_deployment:
          <<: *prod_deploy_tag_only
      - prepare_deploy_geoserver:
          <<: *prod_deploy_tag_only
          requires:
            - validate_prod_deployment
          context: ga_sb_ecs_prod_deployment
      - approve_deploy_geoserver:
          <<: *prod_deploy_tag_only
          type: approval
          requires:
            - prepare_deploy_geoserver
      - do_deploy_geoserver:
          <<: *prod_deploy_tag_only
          requires:
            - approve_deploy_geoserver
          context: ga_sb_ecs_prod_deployment
